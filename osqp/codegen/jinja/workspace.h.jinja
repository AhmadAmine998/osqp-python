{% import "macros.jinja" as macros %}

#include "types.h"


#define OSQP_NDIM ({{ data['n'] }})
#define OSQP_MDIM ({{ data['m'] }})
#define OSQP_A_NNZ ({{ data['A']['nzmax'] }})
#define OSQP_P_NNZ ({{ data['P']['nzmax'] }})
#define OSQP_L_NNZ ({{ priv['L']['nzmax'] }})
#define OSQP_KKT_NDIM ({{ data['n'] + data['m'] }})



// Define data structure
OSQPData data;

csc Pdata;
c_int Pdata_i[OSQP_P_NNZ];
c_int Pdata_p[OSQP_NDIM + 1];
c_float Pdata_x[OSQP_P_NNZ];
Pdata.i = &Pdata_i;
Pdata.p = &Pdata.p;
Pdata.x = &Pdata.x;

csc Adata;
c_int Adata_i[OSQP_P_NNZ];
c_int Adata_p[OSQP_NDIM + 1];
c_float Adata_x[OSQP_P_NNZ];
Adata.i = &Adata_i;
Adata.p = &Adata.p;
Adata.x = &Adata.x;

c_float qdata[OSQP_NDIM];
c_float ldata[OSQP_MDIM];
c_float udata[OSQP_MDIM];

data.P = &Pdata;
data.q = &qdata;
data.A = &Adata;
data.u = &udata;
data.l = &ldata;


// Define settings structure
OSQPSettings settings;


// Define scaling
OSQPScaling scaling;

c_float Dscaling[OSQP_NDIM];
c_float Dinvscaling[OSQP_NDIM];
c_float Escaling[OSQP_MDIM];
c_float Einvscaling[OSQP_MDIM];

scaling.D = &Dscaling;
scaling.Dinv = &Dinvscaling;
scaling.E = &Escaling;
scaling.Einv = &Einvscaling;

// Define private structure
Priv priv;

csc priv_L;
c_int priv_L_i[OSQP_L_NNZ];
c_int priv_L_p[OSQP_KKT_NDIM + 1];
c_float priv_L_x[OSQP_L_NNZ];
priv_L.i = &priv_L_i;
priv_L.p = &priv_L_p;
priv_L.x = &priv_L_x;

c_float priv_Dinv[OSQP_KKT_NDIM];
c_int priv_P[OSQP_KKT_NDIM];
c_float priv_bp[OSQP_KKT_NDIM];

priv.L = &priv_L;
priv.Dinv = &priv_Dinv;
priv.P = &priv_P;
priv.bp = &priv_bp;

// TODO: Add embedded_flag == 2 case!
{% if embedded_flag != 1 %}
{% endif %}



// Define solution
OSQPSolution solution;
c_float xsolution[OSQP_NDIM];
c_float ysolution[OSQP_MDIM];


// Define info
OSQPInfo info;
info.status = OSQP_UNSOLVED;


// Define workspace
OSQPWorkspace workspace;

c_float work_x[OSQP_NDIM];
c_float work_y[OSQP_MDIM];
c_float work_z[OSQP_MDIM];
c_float work_xz_tilde[OSQP_KKT_NDIM];

c_float work_x_prev[OSQP_NDIM];
c_float work_z_prev[OSQP_MDIM];

c_float work_delta_y[OSQP_MDIM];
c_float work_Atdelta_y[OSQP_NDIM];

c_float work_delta_x[OSQP_NDIM];
c_float work_Pdelta_x[OSQP_NDIM];
c_float work_Adelta_x[OSQP_MDIM];

c_float work_P_x[OSQP_NDIM];
c_float work_A_x[OSQP_MDIM];

c_float work_D_temp[OSQP_NDIM];

c_float work_E_temp[OSQP_MDIM];


workspace.data = &data;
workspace.priv = &priv;

work.x = &work_x;
work.y = &work_y;
work.z = &work_z;
work.xz_tilde = &work_xz_tilde;
work.x_prev = &work_x_prev;
work.z_prev = &work_z_prev;
work.delta_y = &work_delta_y;
work.Atdelta_y = &work_Atdelta_y;
work.delta_x = &work_delta_x;
work.Pdelta_x = &work_Pdelta_x;
work.Adelta_x = &work_Adelta_x;
work.P_x = &work_P_x;
work.A_x = &work_A_x;
work.D_temp = &work_D_temp;
work.A_temp = &work_A_temp;


workspace.settings = &settings;
workspace.scaling = &scaling;
workspace.solution = &solution;
workspace.info = &info;






// Populate workspace
void load_workspace(OSQPWorkspace * work){

/* Fill data */

// Fill P
{{ macros.fill_mat(data['P'], 'work->data->P') }}

// Fill q
{{ macros.fill_vec(data['q'], 'work->data->q') }}

// Fill A
{{ macros.fill_mat(data['A'], 'work->data->A') }}

// Fill l
{{ macros.fill_vec(data['q'], 'work->data->l') }}

// Fill u
{{ macros.fill_vec(data['q'], 'work->data->u') }}


/* Fill settings */
{{ macros.fill_settings(settings, 'work->settings') }}


/* Fill scaling */
{{ macros.fill_vec(scaling['D'], 'work->scaling->D') -}}
{{ macros.fill_vec(scaling['Dinv'], 'work->scaling->Dinv') -}}
{{ macros.fill_vec(scaling['E'], 'work->scaling->E') -}}
{{ macros.fill_vec(scaling['Einv'], 'work->scaling->Einv')}}

/* Fill private structure */
{{ macros.fill_mat(priv['L'], 'work->priv->L') -}}
{{ macros.fill_vec(priv['Dinv'], 'work->priv->Dinv') -}}
{{ macros.fill_vec(priv['P'], 'work->priv->P')}}


}
